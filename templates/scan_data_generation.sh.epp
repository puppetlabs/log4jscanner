#!/bin/sh
#
# Generate log4jscanner data for consumption by custom fact
set -e

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH
CACHEDIR=<%= $cache_dir %>
LOCKFILE="${CACHEDIR}/scan_data_generation.lock"
UPDATEFILE="${CACHEDIR}/vulnerable_jars"
ERRORFILE="${CACHEDIR}/scan_errors"

trap "{ rm -f ${LOCKFILE} ; exit 255; }" 2 3 15

if [ -f "${LOCKFILE}" ]; then
  echo 'scan_data_generation.lock file exists, exiting' >&2
  exit 0
else
  echo "$$" > $LOCKFILE
fi

skip=""
<% if $skip and !empty($skip) { -%>
skip='<%= $skip.map |$d| { "--skip ${d} " }.join(" ") %>'
<% } -%>

dirs='<%= $directories.join(" ") %>'

if [ -f "${UPDATEFILE}" ]; then
  mv -f "${UPDATEFILE}" "${UPDATEFILE}.previous"
else
  touch "${UPDATEFILE}.previous"
fi

${CACHEDIR}/<%= $scan_bin %> ${skip} ${dirs} 1>${UPDATEFILE} 2>${ERRORFILE}
diff=$(diff -y --suppress-common "${UPDATEFILE}" "${UPDATEFILE}.previous" | wc -l)
rm -f "${UPDATEFILE}.previous"
if [ "${diff}" != "0" ]; then
  logger -p info -t scan_data_generation.sh "Uploading fact"
  # Find environment puppet runs in. As it is entirely possible to have puppet agent run by external
  # tools calling it - and them always telling puppet in which environment, a simple config print
  # for environment can be wrong.
  # So we parse the report of the last run and use that.
  # In case that fails to parse or does not exist yet, we fall back to asking puppet.
  # The awk BEGIN/END part is magic to make awk exit with an error, if match wasn't found (say, empty file).
  lastreport=$(puppet config print lastrunreport)
  if [ -f "${lastreport}" ]; then
      environment=$(awk -F ': ' 'BEGIN { rc=1 } /^environment: / { print $2; rc=0; exit } END { exit rc }' ${lastreport} || puppet config print environment )
  else
      environment=$(puppet config print environment)
  fi
  <%= $puppet_bin %> <%= $fact_upload_params %> --environment ${environment} 2>/dev/null 1>/dev/null
fi
logger -p info -t scan_data_generation.sh "Log4jscanner scan data refreshed"

rm $LOCKFILE
exit 0